import pygame
import ctypes
import time
import threading
import sys

# Initialisierung von pygame
pygame.init()

# Bildschirmgröße auf Vollbild setzen
info = pygame.display.Info()  # Holen Sie sich die Bildschirmauflösung
screen = pygame.display.set_mode((info.current_w, info.current_h), pygame.FULLSCREEN)

# Farben definieren
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)

# Schriftarten laden
font = pygame.font.SysFont('arial', 48)

# Passwort und Statusvariablen
correct_password = "sicherespasswort"
entered_password = ""
attempts = 0  # Anzahl der falschen Versuche
max_attempts = 3  # Maximale erlaubte Fehlversuche
alarm_triggered = False  # Zustand des Alarms

# RAM-Bereinigung (Multi-Threaded)
def wipe_ram():
    try:
        print("Starte RAM-Bereinigung...")
        buffer = ctypes.create_string_buffer(b'\x00' * 4096)  # 4KB Nullbytes
        def wipe_segment():
            for _ in range(10000):  # Wiederholungen je nach RAM-Größe
                ctypes.memset(ctypes.addressof(buffer), 0, len(buffer))
                time.sleep(0.001)  # CPU-Last reduzieren
        
        threads = []
        for _ in range(8):  # 8 Threads für parallele Bereinigung
            thread = threading.Thread(target=wipe_segment)
            threads.append(thread)
            thread.start()

        for thread in threads:
            thread.join()
        print("RAM erfolgreich bereinigt.")
    except Exception as e:
        print(f"Fehler bei der RAM-Bereinigung: {e}")

# Alarm auslösen
def trigger_alarm():
    global alarm_triggered
    alarm_triggered = True
    print("ALARM ausgelöst! Starte RAM-Bereinigung...")
    wipe_ram()

# Funktion zum Zeichnen des Passworttextes
def draw_password_input():
    screen.fill(BLACK)
    # Text für Passwortaufforderung
    prompt_text = font.render("Bitte Passwort eingeben:", True, WHITE)
    screen.blit(prompt_text, (50, 50))
    
    # Text für das eingegebene Passwort (gekennzeichnet durch Sterne)
    display_password = "*" * len(entered_password)
    password_text = font.render(display_password, True, WHITE)
    screen.blit(password_text, (50, 150))
    
    pygame.display.flip()

# Passwortprüfung
def check_password():
    global entered_password, attempts, alarm_triggered
    while True:
        if alarm_triggered:
            break
        draw_password_input()
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_ESCAPE:  # Escape zum Schließen
                    pygame.quit()
                    sys.exit()
                elif event.key == pygame.K_BACKSPACE:  # Backspace zum Löschen
                    entered_password = entered_password[:-1]
                elif event.key == pygame.K_RETURN:  # Enter für Passwortüberprüfung
                    if entered_password == correct_password:
                        print("Passwort korrekt! System entsperrt.")
                        alarm_triggered = False
                        break
                    else:
                        print("Falsches Passwort!")
                        attempts += 1
                        if attempts >= max_attempts:
                            trigger_alarm()
                            break
                        entered_password = ""  # Passwort zurücksetzen
                else:  # Andernfalls Zeichen hinzufügen
                    entered_password += event.unicode

# USB-Kill-Switch (Simuliert)
def monitor_usb():
    global alarm_triggered
    print("USB-Kill-Switch-Überwachung aktiv.")
    while not alarm_triggered:
        # Simulierte Bedingung, um den Kill-Switch auszulösen
        # Beispiel: Falls eine Datei "usb_kill_signal.txt" existiert, wird der Alarm ausgelöst.
        try:
            with open("usb_kill_signal.txt", "r"):
                print("USB-Kill-Switch erkannt!")
                trigger_alarm()
                break
        except FileNotFoundError:
            time.sleep(1)

# Keylogger-Schutz
def prevent_keylogger():
    # Dies könnte erweitert werden, aber für jetzt ist es eine Platzhalter-Funktion
    print("Keylogger-Schutz aktiviert.")

# Hauptprogramm
def main():
    global alarm_triggered
    # Starte automatische Schutzfunktionen
    threading.Thread(target=monitor_usb).start()  # USB-Kill-Switch überwachen
    threading.Thread(target=prevent_keylogger).start()  # Keylogger-Schutz aktivieren
    check_password()  # Passwortschutz starten

    if not alarm_triggered:
        print("Schutzprogramm ist aktiv. Sie können sicher arbeiten.")
    else:
        print("Schutzprogramm beendet aufgrund eines Alarms.")

if __name__ == "__main__":
    main()
