import os
import ctypes
import time
import threading
from pynput import keyboard
import sys

# Globale Variablen
password = "sicherespasswort"  # Passwort, das zur Entsperrung erforderlich ist
attempts = 0  # Anzahl der falschen Versuche
max_attempts = 3  # Maximale erlaubte Fehlversuche
alarm_triggered = False  # Zustand des Alarms

# RAM-Bereinigung (Multi-Threaded)
def wipe_ram():
    try:
        print("Starte RAM-Bereinigung...")
        buffer = ctypes.create_string_buffer(b'\x00' * 4096)  # 4KB Nullbytes
        def wipe_segment():
            for _ in range(10000):  # Wiederholungen je nach RAM-Größe
                ctypes.memset(ctypes.addressof(buffer), 0, len(buffer))
                time.sleep(0.001)  # CPU-Last reduzieren
        
        threads = []
        for _ in range(8):  # 8 Threads für parallele Bereinigung
            thread = threading.Thread(target=wipe_segment)
            threads.append(thread)
            thread.start()

        for thread in threads:
            thread.join()
        print("RAM erfolgreich bereinigt.")
    except Exception as e:
        print(f"Fehler bei der RAM-Bereinigung: {e}")

# Alarm auslösen
def trigger_alarm():
    global alarm_triggered
    alarm_triggered = True
    print("ALARM ausgelöst! Starte RAM-Bereinigung...")
    wipe_ram()

# Passwortprüfung
def check_password():
    global attempts, alarm_triggered
    while True:
        if alarm_triggered:
            break
        entered_password = input("Passwort eingeben: ")
        if entered_password == password:
            print("System entsperrt!")
            alarm_triggered = False
            break
        else:
            attempts += 1
            print(f"Falsches Passwort! Versuch {attempts}/{max_attempts}")
            if attempts >= max_attempts:
                trigger_alarm()
                break

# USB-Kill-Switch
def monitor_usb():
    # Hier könnte Code hinzugefügt werden, der den Zustand von USB-Geräten überwacht.
    print("USB-Kill-Switch-Überwachung aktiv.")
    while not alarm_triggered:
        # Simulierte Bedingung, um den Kill-Switch auszulösen
        if os.path.exists("usb_kill_signal.txt"):  # Dummy-Trigger
            print("USB-Kill-Switch erkannt!")
            trigger_alarm()
            break
        time.sleep(1)

# Keylogger-Schutz
def prevent_keylogger():
    def on_press(key):
        if alarm_triggered:
            return False  # Stoppt die Eingabe, wenn Alarm ausgelöst wurde
    listener = keyboard.Listener(on_press=on_press)
    listener.start()

# Hauptprogramm
def main():
    print("Schutzprogramm gestartet.")
    
    # Starte automatische Schutzfunktionen
    threading.Thread(target=monitor_usb).start()  # USB-Kill-Switch überwachen
    threading.Thread(target=prevent_keylogger).start()  # Keylogger-Schutz aktivieren
    print("Automatischer Schutz aktiv. Geben Sie Ihr Passwort ein.")
    check_password()  # Passwortschutz starten

    if not alarm_triggered:
        print("Schutzprogramm ist aktiv. Sie können sicher arbeiten.")
    else:
        print("Schutzprogramm beendet aufgrund eines Alarms.")

# Blockiere die Eingabe während der Passwortabfrage
def block_system():
    import tkinter as tk
    root = tk.Tk()
    root.title("Passwortschutz")
    root.attributes('-fullscreen', True)
    root.configure(bg='black')

    def on_key_press(event):
        pass  # Alle Tastatureingaben ignorieren

    def on_close(event):
        pass  # Verhindert das Schließen des Fensters

    root.bind("<Key>", on_key_press)
    root.protocol("WM_DELETE_WINDOW", on_close)
    
    root.after(100, lambda: main())  # Nachdem das Fenster gestartet wurde, rufe das Hauptprogramm auf
    root.mainloop()

if __name__ == "__main__":
    block_system()
